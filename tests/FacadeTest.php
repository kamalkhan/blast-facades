<?php
/**
 * Created by PhpStorm.
 * User: Marco Bunge
 * Date: 22.10.2015
 * Time: 16:07
 */

namespace Blast\Tests;

use Blast\Facades\FacadeFactory;
use Blast\Tests\Stubs\Facades\Foo;
use Interop\Container\ContainerInterface;
use League\Container\Container;

class FacadeTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Container
     */
    private $container;

    public function testFacadeInitiation()
    {
        FacadeFactory::setContainer($this->container);
        $this->assertInstanceOf(ContainerInterface::class, FacadeFactory::getContainer());
    }

    public function testGetInstance()
    {
        FacadeFactory::setContainer($this->container);
        $instance = Foo::__instance();

        //should be instance of FooInterface and Foo
        $this->assertInstanceOf(Stubs\FooInterface::class, $instance);
        $this->assertInstanceOf(Stubs\Foo::class, $instance);
    }

    public function testInstanceSwapping()
    {
        FacadeFactory::setContainer($this->container);
        $instance = Foo::__instance();

        //should be instance of FooInterface and Foo
        $this->assertInstanceOf(Stubs\FooInterface::class, $instance);
        $this->assertInstanceOf(Stubs\Foo::class, $instance);

        $this->container->add(Stubs\FooInterface::class, Stubs\Bob::class);

        $instance = Foo::__instance();

        //should be instance of FooInterface and Foo
        $this->assertInstanceOf(Stubs\FooInterface::class, $instance);
        $this->assertInstanceOf(Stubs\Bob::class, $instance);
    }

    public function testMagicCall()
    {
        FacadeFactory::setContainer($this->container);
        $this->assertEquals('baz', forward_static_call([Foo::class, 'bar']));
        $this->assertEquals('baz', call_user_func(sprintf('%s::%s', Foo::class, 'bar')));
        $this->assertEquals('baz', Foo::bar());
    }

    public function testReceiveAccessor()
    {
        $reflection = new \ReflectionClass(Foo::class);
        $method = $reflection->getMethod('accessor');
        $method->setAccessible(true);
        $result = $method->invoke(null);
        $this->assertEquals(Stubs\FooInterface::class, $result);
    }


    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->container = new Container();
        $this->container->add(Stubs\FooInterface::class, Stubs\Foo::class);

    }




}
